import praw
import prawcore.exceptions
import requests
import time
from datetime import datetime
import numpy as np
from PIL import Image
import imagehash
import cv2
import threading

# Define the threshold for maximum API requests per minute
MAX_REQUESTS_PER_MINUTE = 100
api_requests_count = 0
minute_start_time = time.time()

# Initialize Reddit once and reuse globally
reddit = praw.Reddit(
    client_id='jl-I3OHYH2_VZMC1feoJMQ',
    client_secret='TCOIQBXqIskjWEbdH9i5lvoFavAJ1A',
    username='PokeLeakBot3',
    password='testbot1',
    user_agent='testbot'
)
subreddit = reddit.subreddit("PokeLeaks")

def make_api_request():
    global api_requests_count, minute_start_time
    current_time = time.time()
    if current_time - minute_start_time >= 60:
        minute_start_time = current_time
        api_requests_count = 0
    if api_requests_count >= MAX_REQUESTS_PER_MINUTE:
        throttle_duration = 60 - (current_time - minute_start_time) + 5
        print(f"Throttling for {throttle_duration} seconds...")
        time.sleep(throttle_duration)
    api_requests_count += 1

def handle_exception(e):
    if isinstance(e, prawcore.exceptions.ResponseException) and e.response.status_code == 429:
        print("Rate limited by Reddit API. Ignoring error.")
    else:
        print(f"Exception encountered: {str(e)}")

def monitor_reported_posts():
    try:
        while True:
            make_api_request()
            for post in subreddit.mod.reports():
                make_api_request()
                if post.approved:
                    post.mod.approve()
                    print(f"Post {post.id} has been approved again")
    except Exception as e:
        handle_exception(e)

def handle_modqueue_items():
    timers = {}
    try:
        while True:
            make_api_request()
            for item in subreddit.mod.modqueue():
                make_api_request()
                if item.num_reports == 1 and item.id not in timers:
                    timers[item.id] = time.time()
                    print(f"Starting timer for post {item.id}...")
                if item.id in timers:
                    start_time = timers[item.id]
                    if time.time() - start_time >= 3600:
                        try:
                            make_api_request()
                            item.mod.approve()
                            print(f"Approved post {item.id} with one report")
                            del timers[item.id]
                        except prawcore.exceptions.ServerError as e:
                            handle_exception(e)
    except Exception as e:
        handle_exception(e)

def handle_spoiler_status():
    previous_spoiler_status = {}

    while True:
        try:
            make_api_request()
            for submission in subreddit.new():
                make_api_request()
                if submission.id in previous_spoiler_status:
                    if previous_spoiler_status[submission.id] != submission.spoiler:
                        if submission.spoiler:
                            comment = submission.reply("This post has been marked as a spoiler.")
                        else:
                            comment = submission.reply("This post is no longer marked as a spoiler.")
                        comment.mod.distinguish(sticky=True)
                        make_api_request()
                previous_spoiler_status[submission.id] = submission.spoiler
            time.sleep(30)
        except Exception as e:
            handle_exception(e)

def handle_user_reports_and_removal():
    thresholds = {
        'Comments complaining about Riddler Khu will be removed. Ignore the post if you are going to complain': 1,
        'No insults or harassment of other subreddit members in the comments': 1,
        'No asking about or sharing of XCI or NSP files': 1
    }
    try:
        while True:
            make_api_request()
            for comment in subreddit.mod.modqueue(limit=100):
                make_api_request()
                if isinstance(comment, praw.models.Comment) and comment.user_reports:
                    reason, count = comment.user_reports[0]
                    if reason in thresholds and count >= thresholds[reason]:
                        try:
                            make_api_request()
                            comment.mod.remove()
                            print(f'Removed comment due to {count} reports: {reason}')
                        except prawcore.exceptions.ServerError as e:
                            handle_exception(e)
    except Exception as e:
        handle_exception(e)

def handle_submissions_based_on_user_reports():
    thresholds = {'This is misinformation': 1, 'This is spam': 1}

    while True:
        try:
            make_api_request()
            for post in subreddit.mod.modqueue(limit=100):
                if post.num_reports >= 1:
                    for report in post.user_reports:
                        report_reason = report[0]
                        if report_reason in thresholds and post.num_reports >= thresholds[report_reason]:
                            post.mod.remove()
                            make_api_request()
            time.sleep(60)
        except Exception as e:
            handle_exception(e)

def handle_posts_based_on_removal():
    thresholds = {
        'Posts must be about leaks, riddles, news, and rumours about PokÃ©mon content': 2,
        'Post must not contain any profanities, vulgarity, sexual content, slurs, be appropriate in nature': 2,
        'No reposting of posts already up on the subreddit': 1,
        'No memes allowed': 2,
        'No joke submissions or shitposts': 2,
        'No Self Advertisements/Promotion': 2,
        'No Fan art': 2,
        'Theories, Questions, Speculations must be commented in the Theory/Speculation/Question Megathread': 2,
        'Posts with spoilers must have required spoiler flair, indicate spoiler alert in title, and be vague': 3,
        'Retarded': 1
    }
    while True:
        make_api_request()
        for post in subreddit.mod.modqueue(limit=100):
            make_api_request()
            if isinstance(post, praw.models.Submission) and post.user_reports:
                reason, count = post.user_reports[0]
                if reason in thresholds and count >= thresholds[reason]:
                    try:
                        make_api_request()
                        post.mod.remove()
                        print(f'Removed post due to {count} reports: {reason}')
                    except prawcore.exceptions.ServerError as e:
                        handle_exception(e)

def handle_comments_based_on_approval():
    thresholds = {'This is misinformation': 1, 'This is spam': 1}
    while True:
        make_api_request()
        for comment in subreddit.mod.modqueue(limit=100):
            make_api_request()
            if isinstance(comment, praw.models.Comment) and comment.user_reports:
                reason, count = comment.user_reports[0]
                if reason in thresholds and count >= thresholds[reason]:
                    try:
                        make_api_request()
                        comment.mod.approve()
                        print(f'Comment approved due to {count} reports: {reason}')
                    except prawcore.exceptions.ServerError as e:
                        handle_exception(e)

def run_pokemon_duplicate_bot():
    image_hashes = {}
    moderator_removed_hashes = set()  # Track images removed by moderators
    processed_modqueue_submissions = set()
    approved_by_moderator = set()  # Keep track of submissions approved by moderators
    current_time = int(time.time())

    def post_comment(submission, original_post_author, original_post_title, original_post_link, original_post_date):
        max_retries = 3  # Number of times to retry posting the comment
        retries = 0
        while retries < max_retries:
            try:
                comment = submission.reply(
                    ">| Title | Date and Time |\n"
                    ">|:---:|:---:|\n"
                    ">| [{}]({}) | {} |\n\n"
                    ">[Link to Original Post]({})"
                    .format(original_post_title, original_post_link,
                            original_post_date, original_post_link)
                )
                comment.mod.distinguish(sticky=True)
                print("Duplicate removed and comment posted: ", submission.url)
                return True  # Comment successfully posted
            except Exception as e:
                handle_exception(e)
                retries += 1
                time.sleep(1)  # Wait for a few seconds before retrying
        return False  # Comment posting failed after retries

    def check_removed_original_posts():
        while True:
            make_api_request()
            try:
                for hash_value, (submission_id, creation_time) in list(image_hashes.items()):
                    original_submission = reddit.submission(id=submission_id)
                    original_author = original_submission.author
                    banned_by_moderator = original_submission.banned_by

                    # Check if the post was removed by a moderator
                    if banned_by_moderator is not None:
                        moderator_removed_hashes.add(hash_value)  # Add hash to the blocked list
                        del image_hashes[hash_value]  # Remove the hash from active tracking
                    elif original_author is None:  # User deleted their post
                        del image_hashes[hash_value]
            except Exception as e:
                handle_exception(e)

    # Start a separate thread to continuously check for removed original posts
    original_post_checker_thread = threading.Thread(target=check_removed_original_posts)
    original_post_checker_thread.start()

    try:
        for submission in subreddit.new(limit=99999):
            if isinstance(submission, praw.models.Submission):
                print("Scanning image/post: ", submission.url)
                if submission.url.endswith(('jpg', 'jpeg', 'png', 'gif')):
                    try:
                        image_data = requests.get(submission.url).content
                        img = np.asarray(bytearray(image_data), dtype=np.uint8)
                        img = cv2.imdecode(img, cv2.IMREAD_COLOR)
                        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                        hash_value = str(imagehash.phash(Image.fromarray(gray)))

                        # Ignore duplicate posts removed by moderators
                        if hash_value in moderator_removed_hashes:
                            print(f"Duplicate found and ignored (already removed by mods): {submission.url}")
                            continue

                        # Check if we already encountered this image hash
                        if hash_value in image_hashes:
                            original_submission_id = image_hashes[hash_value][0]
                            original_submission = reddit.submission(id=original_submission_id)
                            original_post_date = datetime.utcfromtimestamp(image_hashes[hash_value][1])
                            original_post_title = original_submission.title
                            original_post_link = original_submission.url

                            # Post a comment about the duplicate
                            post_comment(submission, original_submission.author, original_post_title, original_post_link, original_post_date)
                            submission.mod.remove()
                            print("Duplicate found: ", submission.url)
                        else:
                            # Add this image to tracking
                            image_hashes[hash_value] = (submission.id, current_time)
                    except Exception as e:
                        handle_exception(e)
            time.sleep(1)  # Delay to not overload the server
    except Exception as e:
        handle_exception(e)
